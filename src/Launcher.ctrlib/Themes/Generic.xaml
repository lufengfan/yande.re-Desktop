<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:local="clr-namespace:Launcher.Controls"
    xmlns:converters="clr-namespace:Launcher.Data"
    xmlns:bindingcodedom="clr-namespace:Launcher.Data.BindingCodeDom">
    
    <Style TargetType="{x:Type local:PostThumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PostThumb}">
                    <Grid>
                        <local:FilletPanel
                            Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                            <Image Source="{TemplateBinding ImageSource}"/>
                        </local:FilletPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:FilletPanel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FilletPanel}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.Clip>
                            <MultiBinding>
                                <MultiBinding.Converter>
                                    <converters:FilletClipConverter/>
                                </MultiBinding.Converter>
                                
                                <Binding Path="ActualHeight" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                <Binding Path="ActualWidth" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                <Binding Path="CornerRadius" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </MultiBinding>
                        </Grid.Clip>
                        <ContentPresenter
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}">
                        </ContentPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ChamferPanel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ChamferPanel}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.Clip>
                            <MultiBinding>
                                <MultiBinding.Converter>
                                    <converters:ChamferClipConverter/>
                                </MultiBinding.Converter>
                                
                                <Binding Path="ActualHeight" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                <Binding Path="ActualWidth" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                <Binding Path="CornerSize" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </MultiBinding>
                        </Grid.Clip>
                        <ContentPresenter
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}">
                        </ContentPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="local:CustomizedWindow">
        <Setter Property="WindowTitleAreaContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Header="还原(_R)"/>
                    <MenuItem Header="移动(_M)"/>
                    <MenuItem Header="大小(_S)"/>
                    <MenuItem Header="最大化(_R)"/>
                    <MenuItem Header="最小化(_R)"/>
                    <Separator/>
                    <MenuItem Header="关闭(_C)"
                Command="ApplicationCommands.Close"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>
    
    <converters:DoubleToThicknessConverter x:Key="DoubleToThicknessConverter"/>
    <converters:DoubleToGridLengthConverter x:Key="DoubleToGridLengthConverter"/>
    <bindingcodedom:DoubleToGridLengthBindingCodeDomConverter x:Key="DoubleToGridLengthBindingCodeDomConverter"/>
    <bindingcodedom:DoubleToThicknessBindingCodeDomConverter x:Key="DoubleToThicknessBindingCodeDomConverter"/>
    <bindingcodedom:ColorToSolidColorBrushBindingCodeDomConverter x:Key="ColorToSolidColorBrushBindingCodeDomConverter"/>
    <bindingcodedom:BindingCodeDomConverter x:Key="BindingCodeDomConverter"/>

    <bindingcodedom:BindingCodeDomConverterParameter x:Key="BindingCodeDomConverterParameter_BlurRadius">
        <!--
        <x:Code>
            <![CDATA[
                // 代码逻辑：
                if (values[0] == WindowState.Normal)
                    ;
                else
                {
                    #pop 1
                    #push [double] 0.0
                }
            ]]>
        </x:Code>
        -->
        <bindingcodedom:BindingCodeDomLogicalConditionBranch>
            <bindingcodedom:BindingCodeDomLogicalConditionBranch.Condition>
                <bindingcodedom:BindingCodeDomEqualityBinaryOperation>
                    <bindingcodedom:BindingCodeDomEqualityBinaryOperation.RightObject>
                        <bindingcodedom:BindingCodeDomPrimitiveValue>
                            <WindowState>Normal</WindowState>
                        </bindingcodedom:BindingCodeDomPrimitiveValue>
                    </bindingcodedom:BindingCodeDomEqualityBinaryOperation.RightObject>
                </bindingcodedom:BindingCodeDomEqualityBinaryOperation>
            </bindingcodedom:BindingCodeDomLogicalConditionBranch.Condition>

            <bindingcodedom:BindingCodeDomLogicalConditionBranch.TrueCondition>
                <bindingcodedom:BindingCodeDomDoNothing/>
            </bindingcodedom:BindingCodeDomLogicalConditionBranch.TrueCondition>
            <bindingcodedom:BindingCodeDomLogicalConditionBranch.FalseCondition>
                <bindingcodedom:BindingCodeDomObjectGroup>
                    <bindingcodedom:BindingCodeDomObjectCollection>
                        <bindingcodedom:BindingCodeDomPopCalculationStack PopCount="1"/>
                        <bindingcodedom:BindingCodeDomPrimitiveValue>
                            <system:Double>0.0</system:Double>
                        </bindingcodedom:BindingCodeDomPrimitiveValue>
                    </bindingcodedom:BindingCodeDomObjectCollection>
                </bindingcodedom:BindingCodeDomObjectGroup>
            </bindingcodedom:BindingCodeDomLogicalConditionBranch.FalseCondition>
        </bindingcodedom:BindingCodeDomLogicalConditionBranch>
    </bindingcodedom:BindingCodeDomConverterParameter>
    <bindingcodedom:BindingCodeDomConverterParameter x:Key="BindingCodeDomConverterParameter_BorderThickness">
        <!--
        <x:Code>
            <![CDATA[
                // 代码逻辑：
                if (values[0] == WindowState.Normal)
                    ;
                else
                {
                    #pop 1
                    #push [double] 0.0
                }
            ]]>
        </x:Code>
        -->
        <bindingcodedom:BindingCodeDomLogicalConditionBranch>
            <bindingcodedom:BindingCodeDomLogicalConditionBranch.Condition>
                <bindingcodedom:BindingCodeDomEqualityBinaryOperation>
                    <bindingcodedom:BindingCodeDomEqualityBinaryOperation.RightObject>
                        <bindingcodedom:BindingCodeDomPrimitiveValue>
                            <WindowState>Normal</WindowState>
                        </bindingcodedom:BindingCodeDomPrimitiveValue>
                    </bindingcodedom:BindingCodeDomEqualityBinaryOperation.RightObject>
                </bindingcodedom:BindingCodeDomEqualityBinaryOperation>
            </bindingcodedom:BindingCodeDomLogicalConditionBranch.Condition>

            <bindingcodedom:BindingCodeDomLogicalConditionBranch.TrueCondition>
                <bindingcodedom:BindingCodeDomDoNothing/>
            </bindingcodedom:BindingCodeDomLogicalConditionBranch.TrueCondition>
            <bindingcodedom:BindingCodeDomLogicalConditionBranch.FalseCondition>
                <bindingcodedom:BindingCodeDomObjectGroup>
                    <bindingcodedom:BindingCodeDomObjectCollection>
                        <bindingcodedom:BindingCodeDomPopCalculationStack PopCount="1"/>
                        <bindingcodedom:BindingCodeDomPrimitiveValue>
                            <Thickness>0</Thickness>
                        </bindingcodedom:BindingCodeDomPrimitiveValue>
                    </bindingcodedom:BindingCodeDomObjectCollection>
                </bindingcodedom:BindingCodeDomObjectGroup>
            </bindingcodedom:BindingCodeDomLogicalConditionBranch.FalseCondition>
        </bindingcodedom:BindingCodeDomLogicalConditionBranch>
    </bindingcodedom:BindingCodeDomConverterParameter>
    <bindingcodedom:BindingCodeDomConverterParameter x:Key="BindingCodeDomConverterParameter_ThemeColor">
        <bindingcodedom:BindingCodeDomLogicalConditionBranch>
            <!--
            <x:Code>
                <![CDATA[
                    // 代码逻辑：
                    // values : object[3]
                    WindowState windowState = #pop 1
                    bool isActive = #pop 1
                    if (isActive && windowState == WindowState.Normal)
                        ;
                    else
                    {
                        #pop 1
                        #push [System.Windows.Media.Color] Transparent
                    }
                    return #pop 1
                ]]>
            </x:Code>
            -->
            <bindingcodedom:BindingCodeDomLogicalConditionBranch.Condition>
                <bindingcodedom:BindingCodeDomBooleanAddLogicalBinaryOperation>
                    <bindingcodedom:BindingCodeDomBooleanAddLogicalBinaryOperation.RightObject>
                        <bindingcodedom:BindingCodeDomEqualityBinaryOperation>
                            <bindingcodedom:BindingCodeDomEqualityBinaryOperation.RightObject>
                                <bindingcodedom:BindingCodeDomPrimitiveValue>
                                    <WindowState>Normal</WindowState>
                                </bindingcodedom:BindingCodeDomPrimitiveValue>
                            </bindingcodedom:BindingCodeDomEqualityBinaryOperation.RightObject>
                        </bindingcodedom:BindingCodeDomEqualityBinaryOperation>
                    </bindingcodedom:BindingCodeDomBooleanAddLogicalBinaryOperation.RightObject>
                </bindingcodedom:BindingCodeDomBooleanAddLogicalBinaryOperation>
            </bindingcodedom:BindingCodeDomLogicalConditionBranch.Condition>

            <bindingcodedom:BindingCodeDomLogicalConditionBranch.TrueCondition>
                <bindingcodedom:BindingCodeDomDoNothing/>
            </bindingcodedom:BindingCodeDomLogicalConditionBranch.TrueCondition>
            <bindingcodedom:BindingCodeDomLogicalConditionBranch.FalseCondition>
                <bindingcodedom:BindingCodeDomObjectGroup>
                    <bindingcodedom:BindingCodeDomObjectCollection>
                        <bindingcodedom:BindingCodeDomPopCalculationStack PopCount="1"/>
                        <bindingcodedom:BindingCodeDomPrimitiveValue>
                            <Color>Transparent</Color>
                        </bindingcodedom:BindingCodeDomPrimitiveValue>
                    </bindingcodedom:BindingCodeDomObjectCollection>
                </bindingcodedom:BindingCodeDomObjectGroup>
            </bindingcodedom:BindingCodeDomLogicalConditionBranch.FalseCondition>
        </bindingcodedom:BindingCodeDomLogicalConditionBranch>
    </bindingcodedom:BindingCodeDomConverterParameter>
    <Style TargetType="{x:Type local:DropShadowWindow}">
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="WindowResizeBorderThickness" Value="{Binding BlurRadius, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay, Converter={StaticResource DoubleToThicknessConverter}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DropShadowWindow}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition>
                                <RowDefinition.Height>
                                    <MultiBinding
                                            Converter="{StaticResource DoubleToGridLengthBindingCodeDomConverter}"
                                            ConverterParameter="{StaticResource BindingCodeDomConverterParameter_BlurRadius}">
                                        <MultiBinding.Bindings>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="BlurRadius" Mode="OneWay"/>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="WindowState" Mode="OneWay"/>
                                        </MultiBinding.Bindings>
                                    </MultiBinding>
                                </RowDefinition.Height>
                            </RowDefinition>
                            <RowDefinition/>
                            <RowDefinition>
                                <RowDefinition.Height>
                                    <MultiBinding
                                            Converter="{StaticResource DoubleToGridLengthBindingCodeDomConverter}"
                                            ConverterParameter="{StaticResource BindingCodeDomConverterParameter_BlurRadius}">
                                        <MultiBinding.Bindings>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="BlurRadius" Mode="OneWay"/>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="WindowState" Mode="OneWay"/>
                                        </MultiBinding.Bindings>
                                    </MultiBinding>
                                </RowDefinition.Height>
                            </RowDefinition>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition>
                                <ColumnDefinition.Width>
                                    <MultiBinding
                                            Converter="{StaticResource DoubleToGridLengthBindingCodeDomConverter}"
                                            ConverterParameter="{StaticResource BindingCodeDomConverterParameter_BlurRadius}">
                                        <MultiBinding.Bindings>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="BlurRadius" Mode="OneWay"/>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="WindowState" Mode="OneWay"/>
                                        </MultiBinding.Bindings>
                                    </MultiBinding>
                                </ColumnDefinition.Width>
                            </ColumnDefinition>
                            <ColumnDefinition/>
                            <ColumnDefinition>
                                <ColumnDefinition.Width>
                                    <MultiBinding
                                            Converter="{StaticResource DoubleToGridLengthBindingCodeDomConverter}"
                                            ConverterParameter="{StaticResource BindingCodeDomConverterParameter_BlurRadius}">
                                        <MultiBinding.Bindings>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="BlurRadius" Mode="OneWay"/>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="WindowState" Mode="OneWay"/>
                                        </MultiBinding.Bindings>
                                    </MultiBinding>
                                </ColumnDefinition.Width>
                            </ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Grid.Resources>
                            <Style TargetType="Rectangle">
                                <Setter Property="local:CustomizedWindow.CustomizedWindowAncestor" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"/>
                                <Setter Property="Fill" Value="#01000000"/>
                            </Style>
                        </Grid.Resources>

                        <Rectangle x:Name="WindowNorthResizeRect" Grid.Row="0" Grid.Column="1"
                                local:CustomizedWindow.IsWindowNorthResizeAreaPart="True"/>
                        <Rectangle x:Name="WindowSouthResizeRect" Grid.Row="2" Grid.Column="1"
                                local:CustomizedWindow.IsWindowSouthResizeAreaPart="True"/>
                        <Rectangle x:Name="WindowWestResizeRect" Grid.Row="1" Grid.Column="0"
                                local:CustomizedWindow.IsWindowWestResizeAreaPart="True"/>
                        <Rectangle x:Name="WindowEastResizeRect" Grid.Row="1" Grid.Column="2"
                                local:CustomizedWindow.IsWindowEastResizeAreaPart="True"/>
                        <Rectangle x:Name="WindowNorthWestResizeRect" Grid.Row="0" Grid.Column="0"
                                local:CustomizedWindow.IsWindowNorthWestResizeAreaPart="True"/>
                        <Rectangle x:Name="WindowNorthEastResizeRect" Grid.Row="0" Grid.Column="2"
                                local:CustomizedWindow.IsWindowNorthEastResizeAreaPart="True"/>
                        <Rectangle x:Name="WindowSouthEastResizeRect" Grid.Row="2" Grid.Column="2"
                                local:CustomizedWindow.IsWindowSouthEastResizeAreaPart="True"/>
                        <Rectangle x:Name="WindowSouthWestResizeRect" Grid.Row="2" Grid.Column="0"
                                local:CustomizedWindow.IsWindowSouthWestResizeAreaPart="True"/>

                        <Border x:Name="WindowBorder"
                                Grid.Row="1" Grid.Column="1">
                            <Border.BorderBrush>
                                <MultiBinding
                                        Converter="{StaticResource ColorToSolidColorBrushBindingCodeDomConverter}"
                                        ConverterParameter="{StaticResource BindingCodeDomConverterParameter_ThemeColor}">
                                    <MultiBinding.Bindings>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="DropShadowColor" Mode="OneWay"/>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="IsActive" Mode="OneWay"/>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="WindowState" Mode="OneWay"/>
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </Border.BorderBrush>
                            <Border.BorderThickness>
                                <MultiBinding
                                    Converter="{StaticResource BindingCodeDomConverter}"
                                    ConverterParameter="{StaticResource BindingCodeDomConverterParameter_BorderThickness}">
                                    <MultiBinding.Bindings>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="BorderThickness" Mode="OneWay"/>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="WindowState" Mode="OneWay"/>
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </Border.BorderThickness>
                            <Border.Effect>
                                <DropShadowEffect
                                        ShadowDepth="0">
                                    <DropShadowEffect.BlurRadius>
                                        <MultiBinding
                                                Converter="{StaticResource BindingCodeDomConverter}"
                                                ConverterParameter="{StaticResource BindingCodeDomConverterParameter_BlurRadius}">
                                            <MultiBinding.Bindings>
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="BlurRadius" Mode="OneWay"/>
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="WindowState" Mode="OneWay"/>
                                            </MultiBinding.Bindings>
                                        </MultiBinding>
                                    </DropShadowEffect.BlurRadius>
                                    <DropShadowEffect.Color>
                                        <MultiBinding
                                                Converter="{StaticResource BindingCodeDomConverter}"
                                                ConverterParameter="{StaticResource BindingCodeDomConverterParameter_ThemeColor}">
                                            <MultiBinding.Bindings>
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="DropShadowColor" Mode="OneWay"/>
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="IsActive" Mode="OneWay"/>
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:DropShadowWindow}" Path="WindowState" Mode="OneWay"/>
                                            </MultiBinding.Bindings>
                                        </MultiBinding>
                                    </DropShadowEffect.Color>
                                </DropShadowEffect>
                            </Border.Effect>

                            <Grid x:Name="LayoutRoot"
                                    Background="{TemplateBinding Background}">
                                <AdornerDecorator KeyboardNavigation.IsTabStop="False">
                                    <ContentPresenter x:Name="MainContentPresenter"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            KeyboardNavigation.TabNavigation="Cycle" />
                                </AdornerDecorator>

                                <ResizeGrip x:Name="ResizeGrip"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Bottom"
                                        IsTabStop="False"
                                        WindowChrome.ResizeGripDirection="BottomRight">
                                    <ResizeGrip.Style>
                                        <Style TargetType="ResizeGrip">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                            <Style.Triggers>
                                                <DataTrigger
                                                    Binding="{Binding ResizeMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:DropShadowWindow}}, Mode=OneWay}"
                                                    Value="CanResizeWithGrip">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ResizeGrip.Style>
                                </ResizeGrip>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ItemsView}">
        <Setter Property="ViewType" Value="Grid"/>
        <Style.Triggers>
            <Trigger Property="ViewType" Value="Grid">
                <Setter Property="ItemsPanel" Value="{Binding GridItemsPanel, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
                <Setter Property="ItemTemplate" Value="{Binding GridItemTemplate, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
                <Setter Property="ItemTemplateSelector" Value="{Binding GridItemTemplateSelector, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
            </Trigger>
            <Trigger Property="ViewType" Value="HorizontalWrap">
                <Setter Property="ItemsPanel" Value="{Binding HorizontalWrapItemsPanel, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
                <Setter Property="ItemTemplate" Value="{Binding HorizontalWrapItemTemplate, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
                <Setter Property="ItemTemplateSelector" Value="{Binding HorizontalWrapItemTemplateSelector, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
            </Trigger>
            <Trigger Property="ViewType" Value="VerticalHang">
                <Setter Property="ItemsPanel" Value="{Binding VerticalHangItemsPanel, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
                <Setter Property="ItemTemplate" Value="{Binding VerticalHangItemTemplate, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
                <Setter Property="ItemTemplateSelector" Value="{Binding VerticalHangItemTemplateSelector, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:StatusInfo}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:StatusInfo}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <Image Grid.Column="0"
                                Width="{TemplateBinding IconWidth}" Height="{TemplateBinding IconHeight}"
                                MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding IconMaxWidth}"
                                MinHeight="{TemplateBinding MaxHeight}" MaxHeight="{TemplateBinding IconMaxHeight}"
                                Source="{TemplateBinding Icon}"
                                VerticalAlignment="Center"/>
                        <ContentPresenter Grid.Column="1"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:SideBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:SideBar">
                    <Border
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <DockPanel>
                            <ContentPresenter x:Name="PART_Tip" 
                                    DockPanel.Dock="{TemplateBinding TipDock}"
                                    Content="{TemplateBinding Tip}">
                                <ContentPresenter.Style>
                                    <Style TargetType="ContentPresenter">
                                        <Style.Triggers>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>

                            <ContentPresenter x:Name="PART_Content"/>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
